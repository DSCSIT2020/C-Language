#include <stdio.h>

// A iterative binary search function to search key in arr[low...high]
int binarySearchIter(int arr[], int l, int h, int k) {
    while (l <= h)
    {
        int m = (l+h)/2;

        if (arr[m] == k) // if key is present at the middle, return mid
            return m;
        if (arr[m] < k) // If key greater than mid element, ignore left half
            l = m + 1;
        else // If key is smaller than mid element, ignore right half
            h = m - 1;
    }
    return -1; // return -1 if element not found.
}

/* main function() */
int main(){

    int size,k,i;

    printf("\nEnter no of elements: ");
    scanf("%d",&size);

    int arr[size];

    printf("Enter array elements:");
    for(i=0;i<size;i++)
    {
        scanf("%d",&arr[i]);
    }

    printf("\nEnter the element you want to search : ");
    scanf("%d",&k);

    int index = binarySearchIter(arr, 0, size-1, k);
    if (index != -1)
        printf("Element %d is present at index %d \n", k, index);
    else
        printf("Element %d is not present \n", k);
    return 0;
    }

/* Output: 
------------------------
Enter no of elements: 5
Enter array elements:11
22
33
44
55

Enter the element you want to search : 33
Element 33 is present at index 2



Time Complexity:
--------------------------------------
Let say the iteration in Binary Search terminates after k iterations.
At each iteration, the array is divided by half. So let’s say the length of array at any iteration is n
At Iteration 1,
Length of array = n
At Iteration 2,
Length of array = n/2
At Iteration 3,
Length of array = (n/2)/2 = n/2^2
Therefore, after Iteration k,
Length of array = n/2^k
Also, we know that after
After k divisions, the length of array becomes 1
Therefore
Length of array = n/2^k = 1
=> n = 2^k
Applying log function on both sides:
=> log2 (n) = log2 (2^k)
=> log2 (n) = k log2 (2)
As (loga (a) = 1)
Therefore,
=> k = log2 (n)
Hence, the time complexity of Binary Search  T(n) = log2 (n)

Best case: If the data iis found is a single search , then we have to stop the iteration. In this case time complexity will be O(1) and it's the best case. */